 @page "/List"
 @inject WorkingData.Repository.TakenRepBus.ITakenRep _tasks;

 @inherits LayoutComponentBase
 @using System.Net.Http.Json


@code {
    private bool _hidePosition;
    private bool _loading;
    private List<WorkingData.EntityModel.Tasks.TakTasks> Elements = new List<WorkingData.EntityModel.Tasks.TakTasks>();

    
    protected override async Task OnInitializedAsync()
    {

        Elements = _tasks.GetAll();
        // result = new List<string>();
        // foreach (var task in tasks)
        // {
        //     string projectTasks = "Нет";
        //     if (task.IsProjectTasks == true)
        //     {
        //         projectTasks = "Да";
        //     }

        //     string s = JsonSerializer.Serialize(task.id) + "," + task.Title.Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.Description).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.ServiceCallId) + "," + JsonSerializer.Serialize(task.Service).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.ServiceComponent).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.ExpirationData).Trim(new char[] { '"' }) + "," + projectTasks;
        //     Elements.Add(task);
        // }
    }

}
>
<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Medium" >
        @Body
      
        <MudTable Items="@Elements.Take(4)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" SortLabel="Sort By">
            <ToolBarContent >
                <MudSpacer />
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="d-flex justify-end ">
                    <MudButton>@_buttonText</MudButton>
                    <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                        <MudMenuItem OnClick="() => SetButtonText(0)">Все заявки</MudMenuItem>
                        <MudMenuItem OnClick="() => SetButtonText(1)">Подразделение 1</MudMenuItem>


                    </MudMenu>
                </MudButtonGroup>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<WorkingData.EntityModel.Tasks.TakTasks, object>(x => x.id)">ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<WorkingData.EntityModel.Tasks.TakTasks, object>(x => x.Title)">Title</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<WorkingData.EntityModel.Tasks.TakTasks, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<WorkingData.EntityModel.Tasks.TakTasks, object>(x => x.Service)">Service</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<WorkingData.EntityModel.Tasks.TakTasks, object>(x => x.ServiceComponent)">ServiceComponent</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<WorkingData.EntityModel.Tasks.TakTasks, object>(x => x.ExpirationData)">Дата</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<WorkingData.EntityModel.Tasks.TakTasks, object>(x => x.IsProjectTasks)">Is Project Taskst</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.id</MudTd>
                <MudTd DataLabel="Titl">@context.Title</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Service">@context.Service</MudTd>
                <MudTd DataLabel="ServiceComponent">@context.ServiceComponent</MudTd>
                <MudTd DataLabel="Дата">@context.ExpirationData</MudTd>
                <MudTd DataLabel="Is Project Taskst">@context.IsProjectTasks</MudTd>
            </RowTemplate>
        </MudTable>

        @code {
            private string _buttonText = "По умолчанию";

        private void SetButtonText(int id)
        {
            switch (id)
            {
            case 0:
                _buttonText = "По умолчанию";
                P();
                fdata = true;
                break;
            case 1:
                _buttonText = "Подразделение 1";
                divisionId = 1;
                DivisionIdTasks();
                break;
           


            }


        }
       List< WorkingData.EntityModel.Tasks.TakTasks> takTasks;
        long divisionId;
        bool fdata = true;
        int n;
        private void filterData()
        {
            result = new List<string>();
                var div = _tasks.FilterData(fdata);
                foreach (var d in div)
                {
            string projectTasks = "Нет";
            if (d.IsProjectTasks == true)
            {
                projectTasks = "Да";
            }

            string s = JsonSerializer.Serialize(d.id) + "," + d.Title.Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.Description).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ServiceCallId) + "," + JsonSerializer.Serialize(d.Service).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ServiceComponent).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ExpirationData).Trim(new char[] { '"' }) + "," + projectTasks;
            result.Add(s);
                }
            foreach (var d in div)
            {
            string projectTasks = "Нет";
                if (d.IsProjectTasks == true)
                    {
                        projectTasks = "Да";
                    }

                string s = JsonSerializer.Serialize(d.id) + "," + d.Title.Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.Description).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ServiceCallId) + "," + JsonSerializer.Serialize(d.Service).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ServiceComponent).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ExpirationData).Trim(new char[] { '"' }) + "," + projectTasks;
                result.Add(s);
                }
            }

        private void DivisionIdTasks()
        {
            Elements = _tasks.GetbyIdDivisionTakenTasks(divisionId);
            // result = new List<string>();
            // foreach (var task in tasks)
            // {
            // string projectTasks = "Нет";
            // if (task.IsProjectTasks == true)
            //         {
            //             projectTasks = "Да";
            //         }

            // string s = JsonSerializer.Serialize(task.id) + "," + task.Title.Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.Description).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.ServiceCallId) + "," + JsonSerializer.Serialize(task.Service).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.ServiceComponent).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.ExpirationData).Trim(new char[] { '"' }) + "," + projectTasks;
            //     result.Add(s);
            // }
        }
        private void GetAllTasks()
        {
            Elements = _tasks.GetbyIdDivisionTakenTasks(divisionId);
            // result = new List<string>();
            // foreach (var task in tasks)
            // {
            // string projectTasks = "Нет";
            // if (task.IsProjectTasks == true)
            //         {
            //             projectTasks = "Да";
            //         }

            // string s = JsonSerializer.Serialize(task.id) + "," + task.Title.Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.Description).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.ServiceCallId) + "," + JsonSerializer.Serialize(task.Service).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.ServiceComponent).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(task.ExpirationData).Trim(new char[] { '"' }) + "," + projectTasks;
            //     result.Add(s);
            // }
        }
        private void filterTitlleName()
        {
            result = new List<string>();
            var div = _tasks.FilterName(fdata);
            foreach (var d in div)
            {
                string f = "Нет";
                if (d.IsProjectTasks == true)
                {
                    f = "Да";
                }

                string s = JsonSerializer.Serialize(d.id) + "," + d.Title.Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.Description).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ServiceCallId) + "," + JsonSerializer.Serialize(d.Service).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ServiceComponent).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ExpirationData).Trim(new char[] { '"' }) + "," + f;
                result.Add(s);
            }

        }

        }
        
      
        @code {
        
       
        List<string> result = new List<string>();

        private void P()
        {
            result = new List<string>();

            var div = _tasks.GetAll();
            takTasks = div;
            foreach(var d in div)
            {
            string f = "Нет";
            if(d.IsProjectTasks == true)
            {
                f = "Да";
            }

            string s = JsonSerializer.Serialize(d.id) + "," + d.Title.Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.Description).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ServiceCallId) + "," + JsonSerializer.Serialize(d.Service).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ServiceComponent).Trim(new char[] { '"' }) + "," + JsonSerializer.Serialize(d.ExpirationData).Trim(new char[] { '"' }) + "," + f;
           // Elements.Add(s);
                
            }

        }


        }
    </MudContainer>
</MudMainContent>   
